@using CSI.IBTA.Shared.Entities
@model List<Employer>

<div id="table-employer" class="container">
    <div class="row">
        <div class="col-sm-8">
        </div>
        <div class="col-sm-4">
            <button class="btn btn-primary">Add New Employer</button>
        </div>
    </div>

    <span class="border-label" style="text-align:left">Search Criteria</span>
    <div class="row form-columns">
        <form asp-action="Index" method="get">
            <div class="form-actions no-color">
                <p>
                    <label for="NameFilter">Employer Name:</label>
                    <input type="text" name="NameFilter" value="@ViewData["CurrentNameFilter"]" />
                    <label for="CodeFilter">Employer Code:</label>
                    <input type="text" name="CodeFilter" value="@ViewData["CurrentCodeFilter"]" />
                    <input type="submit" value="Search" class="btn btn-primary" />
                    <a asp-action="Index" class="btn btn-primary">Back to Full List</a>
                </p>
            </div>
        </form>
    </div>
    <br />
    <div class="row">
        <div class="table-data">
            <table class="table table-striped" id="employer-table">
                <thead>
                    <tr>
                        <th>Employer Name</th>
                        <th>Employer Code</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                <a onclick="showEmployerDetails(@item.Id)"> @Html.DisplayFor(modelItem => item.Name) </a>
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Code)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div style="text-align:right" class="pages">
                <button class="btn btn-primary btn-small">Prev</button>
                <span>0</span>
                <button class="btn btn-primary btn-small">Next</button>
            </div>

        </div>
    </div>
</div>
<div id="control-employer" style="display: none;" />

<script type="text/javascript">
    function showEmployerDetails(employerId) {
        fetch('/Employer?employerId=' + employerId)
            .then(function (response) {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(function (data) {
                document.getElementById('control-employer').innerHTML = data;
                $("#table-employer").hide();
                $("#control-employer").show();
            })
            .catch(function (error) {
                console.error('There was a problem with the fetch operation:', error);
            });
    }

    function showEmployerUsersManagement(employerId) {
        fetch('/Employer/Users?employerId=' + employerId)
            .then(function (response) {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(function (data) {
                document.getElementById('employer-partial-action').innerHTML = data;
            })
            .catch(function (error) {
                console.error('There was a problem with the fetch operation:', error);
            });
    }

    function generateRandomPassword(length) {
        const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!$%^&*()-_=+[]{}|;:'\",.<>/?";
        let password = "";
        for (let i = 0; i < length; i++) {
            const randomIndex = Math.floor(Math.random() * charset.length);
            password += charset[randomIndex];
        }
        return password;
    }

    function setRandomPassword() {
        const passwordLength = 12;
        const password = generateRandomPassword(passwordLength);
        const passwordInput = document.getElementById("passwordInput");

        if (passwordInput) {
            passwordInput.value = password;
        } else {
            console.error("Input field not found!");
        }
    }

    function showUserInformationSection() {
        var element = document.querySelector('.user-information-section');
        if (element.hasAttribute('hidden')) {
            element.removeAttribute('hidden');
        } else {
            element.setAttribute('hidden', 'true');
        }
    }

    let selectedId = -1;
    let selectedElement = null;

    function highlightRow(element) {
        const updateButton = document.getElementById('update-button');
        currentId = element.getAttribute('data-userId');

        if (selectedId == currentId) {
            updateButton.setAttribute('hidden', true);
            element.classList.remove("highlight");
            selectedId = -1;
            selectedElement = null;
        } else {
            if (selectedElement != null) {
                selectedElement.classList.remove("highlight");
            }
            element.classList.add("highlight");
            selectedId = element.getAttribute('data-userId');
            selectedElement = element;
            updateButton.removeAttribute('hidden');
        }
    }

    function updateUser() {
        console.log(selectedId);
        console.log(selectedElement);
    }

    function showCreateUserSection(employerId) {
        fetch('/Employer/CreateUser?employerId=' + employerId)
            .then(function (response) {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(function (data) {
                document.getElementById('user-create-section').innerHTML = data;
            })
            .catch(function (error) {
                console.error('There was a problem with the fetch operation:', error);
            });
    }

    function showUpdateUserSection(employerId) {
        fetch('/Employer/UpdateUser?employerId=' + employerId + '&userId=' + selectedId)
            .then(function (response) {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(function (data) {
                document.getElementById('user-create-section').innerHTML = data;
            })
            .catch(function (error) {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
</script>