@using CSI.IBTA.Employer.Constants
@using CSI.IBTA.Shared.Utils.Extensions
@using CSI.IBTA.Shared.DataStructures
@using CSI.IBTA.Shared.DTOs
@using CSI.IBTA.Shared.Entities
@using CSI.IBTA.Shared.Extensions
@model EmployeesSearchViewModel

@{
    var nextDisabled = Model.Page >= Model.TotalPages ? "disabled" : "";
    var prevDisabled = Model.Page <= 1 ? "disabled" : "";

    string GetFilter(string viewDataId)
    {
        return ViewData[viewDataId] == null ? "" : ViewData[viewDataId]!.ToString()!;
    }
}

<head>
    <link rel="stylesheet" href="~/css/employees-partial-view.css">
</head>

<div class="employee-container">
    <span class="border-label-employees">Search Employees</span>

    <div class="form-inputs">
        <form asp-action="Employees" method="get" id="employees-search-form">
            <div>
                <p>
                    <div class="filter-inputs">
                        <div>
                            <label for="NumberFilter">First Name:</label>
                            <input type="text" name="FirstnameFilter" value="@ViewData["CurrentFirstnameFilter"]" />
                        </div>
                        <div>
                            <label for="NumberFilter">Last Name:</label>
                            <input type="text" name="LastnameFilter" value="@ViewData["CurrentLastnameFilter"]" />
                        </div>
                        <div>
                            <label for="NumberFilter">SSN:</label>
                            <input type="text" name="SsnFilter" value="@ViewData["CurrentSsnFilter"]" />
                        </div>
                    </div>
                    <div class="filter-buttons">
                        <input type="button" onclick="searchEmployees(@Model.EmployerId)" value="Search" class="btn btn-primary" />
                        <input type="button" onclick="showEmployees(@Model.EmployerId)" class="btn btn-secondary" value="Reset Filters">
                    </div>
                </p>
            </div>
        </form>
    </div>

    <div id="add-new-button-parent">
        <button class="btn btn-primary" onclick="openEmployeeForm(@Model.EmployerId)">Add New</button>
    </div>

    @if (Model.Employees.Any())
    {
        <div class="employees-table">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>SSN</th>
                        <th>Date of Birth</th>
                        <th>Enrollments</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Employees)
                    {
                        <tr>
                            <td>
                                <a href="#">@Html.DisplayFor(modelItem => item.Firstname)</a>
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Lastname)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SSN)
                            </td>
                            <td>
                                @(item.DateOfBirth?.ToString("MM/dd/yyyy") ?? "N/A")
                            </td>
                            <td>
                                <button class="anchor-style-button" onclick="showEnrollments(@Model.EmployerId, @item.Id)">Enroll or Update Enrollment</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="pages">
                <a onclick="getEmployeesPage(@Model.EmployerId, @(Model.Page - 1), '@GetFilter("CurrentFirstnameFilter")', '@GetFilter("CurrentLastnameFilter")', '@GetFilter("CurrentSsnFilter")')"
                   class="btn btn-default @prevDisabled">
                    &lt;&lt; Prev
                </a>
                @{
                    var nextPages = Math.Max(PaginationConstants.PagesToShow, Model.Page + PaginationConstants.NextPages);
                    var lastPage = Math.Min(nextPages, Model.TotalPages);
                    var firstPage = Math.Max(1, lastPage - (PaginationConstants.NextPages + PaginationConstants.PrevPages));
                    for (int i = firstPage; i <= lastPage; i++)
                    {
                        if (i == Model.Page || Model.Page == 0)
                        {
                            <span class="page-button selected">@Model.Page</span>
                        }
                        else
                        {
                            <a onclick="getEmployeesPage(@Model.EmployerId, @(i), '@GetFilter("CurrentFirstnameFilter")', '@GetFilter("CurrentLastnameFilter")', '@GetFilter("CurrentSsnFilter")')"
                               class="btn btn-default page-button">
                                @i
                            </a>
                        }
                    }
                }
                <a onclick="getEmployeesPage(@Model.EmployerId, @(Model.Page + 1), '@GetFilter("CurrentFirstnameFilter")', '@GetFilter("CurrentLastnameFilter")', '@GetFilter("CurrentSsnFilter")')"
                   class="btn btn-default @nextDisabled">
                    Next >>
                </a>
            </div>
        </div>
    }
    else
    {
        <p>No employees found</p>
    }
</div>